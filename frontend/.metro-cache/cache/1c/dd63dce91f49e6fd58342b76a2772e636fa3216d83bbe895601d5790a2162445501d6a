{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _ExpoFontLoader = require(_dependencyMap[1], \"./ExpoFontLoader\");\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[2], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[3], \"./FontLoader\");\n  var _memory = require(_dependencyMap[4], \"./memory\");\n  var _server = require(_dependencyMap[5], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (typeof ExpoFontLoader.default.isLoaded !== 'function') {\n        throw new Error(`expected ExpoFontLoader.isLoaded to be a function, was ${typeof ExpoFontLoader.default.isLoaded}`);\n      }\n      return (0, _memory.isLoadedInCache)(fontFamily) || ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-app-config) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    const isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      const fontMap = fontFamilyOrFontMap;\n      const names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  async function loadFontInNamespaceAsync(fontFamily, source) {\n    if (!source) {\n      throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n    }\n    // we consult the native module to see if the font is already loaded\n    // this is slower than checking the cache but can help avoid loading the same font n times\n    if (isLoaded(fontFamily)) {\n      return;\n    }\n    if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n      return _memory.loadPromises[fontFamily];\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    const asset = (0, _FontLoader.getAssetForSource)(source);\n    _memory.loadPromises[fontFamily] = (async () => {\n      try {\n        await (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n        (0, _memory.markLoaded)(fontFamily);\n      } finally {\n        delete _memory.loadPromises[fontFamily];\n      }\n    })();\n    await _memory.loadPromises[fontFamily];\n  }\n  // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  async function unloadAllAsync() {\n    if (!ExpoFontLoader.default.unloadAllAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(_memory.loadPromises).length) {\n      throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n    }\n    (0, _memory.purgeCache)();\n    await ExpoFontLoader.default.unloadAllAsync();\n  }\n  // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  async function unloadAsync(fontFamilyOrFontMap, options) {\n    if (!ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (options) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n      }\n      const fontMap = fontFamilyOrFontMap;\n      const names = Object.keys(fontMap);\n      await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n      return;\n    }\n    return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n  }\n  async function unloadFontInNamespaceAsync(fontFamily, options) {\n    if (!isLoaded(fontFamily)) {\n      return;\n    } else {\n      (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    if (!fontFamily) {\n      throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n    }\n    if (!ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    await ExpoFontLoader.default.unloadAsync(fontFamily, options);\n  }\n});","lineCount":189,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,29,0,"exports"],[13,9,29,0],[13,10,29,0,"getLoadedFonts"],[13,24,29,0],[13,27,29,0,"getLoadedFonts"],[13,41,29,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"isLoading"],[14,19,39,0],[14,22,39,0,"isLoading"],[14,31,39,0],[15,2,57,0,"exports"],[15,9,57,0],[15,10,57,0,"loadAsync"],[15,19,57,0],[15,22,57,0,"loadAsync"],[15,31,57,0],[16,2,113,0,"exports"],[16,9,113,0],[16,10,113,0,"unloadAllAsync"],[16,24,113,0],[16,27,113,0,"unloadAllAsync"],[16,41,113,0],[17,2,133,0,"exports"],[17,9,133,0],[17,10,133,0,"unloadAsync"],[17,21,133,0],[17,24,133,0,"unloadAsync"],[17,35,133,0],[18,2,167,0,"Object"],[18,8,167,0],[18,9,167,0,"defineProperty"],[18,23,167,0],[18,24,167,0,"exports"],[18,31,167,0],[19,4,167,0,"enumerable"],[19,14,167,0],[20,4,167,0,"get"],[20,7,167,0],[20,18,167,0,"get"],[20,19,167,0],[21,6,167,0],[21,13,167,9,"FontDisplay"],[21,23,167,20],[21,24,167,20,"FontDisplay"],[21,35,167,20],[22,4,167,20],[23,2,167,20],[24,2,1,0],[24,6,1,0,"_expoModulesCore"],[24,22,1,0],[24,25,1,0,"require"],[24,32,1,0],[24,33,1,0,"_dependencyMap"],[24,47,1,0],[25,2,2,0],[25,6,2,0,"_ExpoFontLoader"],[25,21,2,0],[25,24,2,0,"require"],[25,31,2,0],[25,32,2,0,"_dependencyMap"],[25,46,2,0],[26,2,2,0],[26,6,2,0,"ExpoFontLoader"],[26,20,2,0],[26,23,2,0,"_interopDefault"],[26,38,2,0],[26,39,2,0,"_ExpoFontLoader"],[26,54,2,0],[27,2,3,0],[27,6,3,0,"_FontTypes"],[27,16,3,0],[27,19,3,0,"require"],[27,26,3,0],[27,27,3,0,"_dependencyMap"],[27,41,3,0],[28,2,4,0],[28,6,4,0,"_FontLoader"],[28,17,4,0],[28,20,4,0,"require"],[28,27,4,0],[28,28,4,0,"_dependencyMap"],[28,42,4,0],[29,2,5,0],[29,6,5,0,"_memory"],[29,13,5,0],[29,16,5,0,"require"],[29,23,5,0],[29,24,5,0,"_dependencyMap"],[29,38,5,0],[30,2,6,0],[30,6,6,0,"_server"],[30,13,6,0],[30,16,6,0,"require"],[30,23,6,0],[30,24,6,0,"_dependencyMap"],[30,38,6,0],[31,2,7,0],[32,2,8,0],[33,0,9,0],[34,0,10,0],[35,0,11,0],[36,0,12,0],[37,0,13,0],[38,2,14,7],[38,11,14,16,"isLoaded"],[38,19,14,24,"isLoaded"],[38,20,14,25,"fontFamily"],[38,30,14,35],[38,32,14,37],[39,4,15,4],[39,8,15,8,"Platform"],[39,24,15,16],[39,25,15,16,"Platform"],[39,33,15,16],[39,34,15,17,"OS"],[39,36,15,19],[39,41,15,24],[39,46,15,29],[39,48,15,31],[40,6,16,8],[40,10,16,12],[40,17,16,19,"ExpoFontLoader"],[40,31,16,33],[40,32,16,33,"default"],[40,39,16,33],[40,40,16,34,"isLoaded"],[40,48,16,42],[40,53,16,47],[40,63,16,57],[40,65,16,59],[41,8,17,12],[41,14,17,18],[41,18,17,22,"Error"],[41,23,17,27],[41,24,17,28],[41,82,17,86],[41,89,17,93,"ExpoFontLoader"],[41,103,17,107],[41,104,17,107,"default"],[41,111,17,107],[41,112,17,108,"isLoaded"],[41,120,17,116],[41,122,17,118],[41,123,17,119],[42,6,18,8],[43,6,19,8],[43,13,19,15],[43,17,19,15,"isLoadedInCache"],[43,24,19,30],[43,25,19,30,"isLoadedInCache"],[43,40,19,30],[43,42,19,31,"fontFamily"],[43,52,19,41],[43,53,19,42],[43,57,19,46,"ExpoFontLoader"],[43,71,19,60],[43,72,19,60,"default"],[43,79,19,60],[43,80,19,61,"isLoaded"],[43,88,19,69],[43,89,19,70,"fontFamily"],[43,99,19,80],[43,100,19,81],[44,4,20,4],[45,4,21,4],[45,11,21,11],[45,15,21,11,"isLoadedNative"],[45,22,21,25],[45,23,21,25,"isLoadedNative"],[45,37,21,25],[45,39,21,26,"fontFamily"],[45,49,21,36],[45,50,21,37],[46,2,22,0],[47,2,23,0],[48,0,24,0],[49,0,25,0],[50,0,26,0],[51,0,27,0],[52,0,28,0],[53,2,29,7],[53,11,29,16,"getLoadedFonts"],[53,25,29,30,"getLoadedFonts"],[53,26,29,30],[53,28,29,33],[54,4,30,4],[54,11,30,11,"ExpoFontLoader"],[54,25,30,25],[54,26,30,25,"default"],[54,33,30,25],[54,34,30,26,"getLoadedFonts"],[54,48,30,40],[54,49,30,41],[54,50,30,42],[55,2,31,0],[56,2,32,0],[57,2,33,0],[58,0,34,0],[59,0,35,0],[60,0,36,0],[61,0,37,0],[62,0,38,0],[63,2,39,7],[63,11,39,16,"isLoading"],[63,20,39,25,"isLoading"],[63,21,39,26,"fontFamily"],[63,31,39,36],[63,33,39,38],[64,4,40,4],[64,11,40,11,"fontFamily"],[64,21,40,21],[64,25,40,25,"loadPromises"],[64,32,40,37],[64,33,40,37,"loadPromises"],[64,45,40,37],[65,2,41,0],[66,2,42,0],[67,2,43,0],[68,0,44,0],[69,0,45,0],[70,0,46,0],[71,0,47,0],[72,0,48,0],[73,0,49,0],[74,0,50,0],[75,0,51,0],[76,0,52,0],[77,0,53,0],[78,0,54,0],[79,0,55,0],[80,0,56,0],[81,2,57,7],[81,11,57,16,"loadAsync"],[81,20,57,25,"loadAsync"],[81,21,57,26,"fontFamilyOrFontMap"],[81,40,57,45],[81,42,57,47,"source"],[81,48,57,53],[81,50,57,55],[82,4,58,4],[83,4,59,4],[84,4,60,4],[85,4,61,4],[85,10,61,10,"isServer"],[85,18,61,18],[85,21,61,21,"Platform"],[85,37,61,29],[85,38,61,29,"Platform"],[85,46,61,29],[85,47,61,30,"OS"],[85,49,61,32],[85,54,61,37],[85,59,61,42],[85,63,61,46],[85,70,61,53,"window"],[85,76,61,59],[85,81,61,64],[85,92,61,75],[86,4,62,4],[86,8,62,8],[86,15,62,15,"fontFamilyOrFontMap"],[86,34,62,34],[86,39,62,39],[86,47,62,47],[86,49,62,49],[87,6,63,8],[87,10,63,12,"source"],[87,16,63,18],[87,18,63,20],[88,8,64,12],[88,15,64,19,"Promise"],[88,22,64,26],[88,23,64,27,"reject"],[88,29,64,33],[88,30,64,34],[88,34,64,38,"CodedError"],[88,50,64,48],[88,51,64,48,"CodedError"],[88,61,64,48],[88,62,64,49],[88,76,64,63],[88,78,64,65],[88,132,64,119,"source"],[88,138,64,125],[88,244,64,231],[88,245,64,232],[88,246,64,233],[89,6,65,8],[90,6,66,8],[90,12,66,14,"fontMap"],[90,19,66,21],[90,22,66,24,"fontFamilyOrFontMap"],[90,41,66,43],[91,6,67,8],[91,12,67,14,"names"],[91,17,67,19],[91,20,67,22,"Object"],[91,26,67,28],[91,27,67,29,"keys"],[91,31,67,33],[91,32,67,34,"fontMap"],[91,39,67,41],[91,40,67,42],[92,6,68,8],[92,10,68,12,"isServer"],[92,18,68,20],[92,20,68,22],[93,8,69,12,"names"],[93,13,69,17],[93,14,69,18,"map"],[93,17,69,21],[93,18,69,23,"name"],[93,22,69,27],[93,26,69,32],[93,30,69,32,"registerStaticFont"],[93,37,69,50],[93,38,69,50,"registerStaticFont"],[93,56,69,50],[93,58,69,51,"name"],[93,62,69,55],[93,64,69,57,"fontMap"],[93,71,69,64],[93,72,69,65,"name"],[93,76,69,69],[93,77,69,70],[93,78,69,71],[93,79,69,72],[94,8,70,12],[94,15,70,19,"Promise"],[94,22,70,26],[94,23,70,27,"resolve"],[94,30,70,34],[94,31,70,35],[94,32,70,36],[95,6,71,8],[96,6,72,8],[96,13,72,15,"Promise"],[96,20,72,22],[96,21,72,23,"all"],[96,24,72,26],[96,25,72,27,"names"],[96,30,72,32],[96,31,72,33,"map"],[96,34,72,36],[96,35,72,38,"name"],[96,39,72,42],[96,43,72,47,"loadFontInNamespaceAsync"],[96,67,72,71],[96,68,72,72,"name"],[96,72,72,76],[96,74,72,78,"fontMap"],[96,81,72,85],[96,82,72,86,"name"],[96,86,72,90],[96,87,72,91],[96,88,72,92],[96,89,72,93],[96,90,72,94],[96,91,72,95,"then"],[96,95,72,99],[96,96,72,100],[96,102,72,106],[96,103,72,108],[96,104,72,109],[96,105,72,110],[97,4,73,4],[98,4,74,4],[98,8,74,8,"isServer"],[98,16,74,16],[98,18,74,18],[99,6,75,8],[99,10,75,8,"registerStaticFont"],[99,17,75,26],[99,18,75,26,"registerStaticFont"],[99,36,75,26],[99,38,75,27,"fontFamilyOrFontMap"],[99,57,75,46],[99,59,75,48,"source"],[99,65,75,54],[99,66,75,55],[100,6,76,8],[100,13,76,15,"Promise"],[100,20,76,22],[100,21,76,23,"resolve"],[100,28,76,30],[100,29,76,31],[100,30,76,32],[101,4,77,4],[102,4,78,4],[102,11,78,11,"loadFontInNamespaceAsync"],[102,35,78,35],[102,36,78,36,"fontFamilyOrFontMap"],[102,55,78,55],[102,57,78,57,"source"],[102,63,78,63],[102,64,78,64],[103,2,79,0],[104,2,80,0],[104,17,80,15,"loadFontInNamespaceAsync"],[104,41,80,39,"loadFontInNamespaceAsync"],[104,42,80,40,"fontFamily"],[104,52,80,50],[104,54,80,52,"source"],[104,60,80,58],[104,62,80,60],[105,4,81,4],[105,8,81,8],[105,9,81,9,"source"],[105,15,81,15],[105,17,81,17],[106,6,82,8],[106,12,82,14],[106,16,82,18,"CodedError"],[106,32,82,28],[106,33,82,28,"CodedError"],[106,43,82,28],[106,44,82,29],[106,61,82,46],[106,63,82,48],[106,112,82,97,"fontFamily"],[106,122,82,107],[106,128,82,113,"source"],[106,134,82,119],[106,204,82,189,"fontFamily"],[106,214,82,199],[106,217,82,202],[106,218,82,203],[107,4,83,4],[108,4,84,4],[109,4,85,4],[110,4,86,4],[110,8,86,8,"isLoaded"],[110,16,86,16],[110,17,86,17,"fontFamily"],[110,27,86,27],[110,28,86,28],[110,30,86,30],[111,6,87,8],[112,4,88,4],[113,4,89,4],[113,8,89,8,"loadPromises"],[113,15,89,20],[113,16,89,20,"loadPromises"],[113,28,89,20],[113,29,89,21,"hasOwnProperty"],[113,43,89,35],[113,44,89,36,"fontFamily"],[113,54,89,46],[113,55,89,47],[113,57,89,49],[114,6,90,8],[114,13,90,15,"loadPromises"],[114,20,90,27],[114,21,90,27,"loadPromises"],[114,33,90,27],[114,34,90,28,"fontFamily"],[114,44,90,38],[114,45,90,39],[115,4,91,4],[116,4,92,4],[117,4,93,4],[118,4,94,4],[119,4,95,4],[120,4,96,4],[120,10,96,10,"asset"],[120,15,96,15],[120,18,96,18],[120,22,96,18,"getAssetForSource"],[120,33,96,35],[120,34,96,35,"getAssetForSource"],[120,51,96,35],[120,53,96,36,"source"],[120,59,96,42],[120,60,96,43],[121,4,97,4,"loadPromises"],[121,11,97,16],[121,12,97,16,"loadPromises"],[121,24,97,16],[121,25,97,17,"fontFamily"],[121,35,97,27],[121,36,97,28],[121,39,97,31],[121,40,97,32],[121,52,97,44],[122,6,98,8],[122,10,98,12],[123,8,99,12],[123,14,99,18],[123,18,99,18,"loadSingleFontAsync"],[123,29,99,37],[123,30,99,37,"loadSingleFontAsync"],[123,49,99,37],[123,51,99,38,"fontFamily"],[123,61,99,48],[123,63,99,50,"asset"],[123,68,99,55],[123,69,99,56],[124,8,100,12],[124,12,100,12,"markLoaded"],[124,19,100,22],[124,20,100,22,"markLoaded"],[124,30,100,22],[124,32,100,23,"fontFamily"],[124,42,100,33],[124,43,100,34],[125,6,101,8],[125,7,101,9],[125,16,102,16],[126,8,103,12],[126,15,103,19,"loadPromises"],[126,22,103,31],[126,23,103,31,"loadPromises"],[126,35,103,31],[126,36,103,32,"fontFamily"],[126,46,103,42],[126,47,103,43],[127,6,104,8],[128,4,105,4],[128,5,105,5],[128,7,105,7],[128,8,105,8],[129,4,106,4],[129,10,106,10,"loadPromises"],[129,17,106,22],[129,18,106,22,"loadPromises"],[129,30,106,22],[129,31,106,23,"fontFamily"],[129,41,106,33],[129,42,106,34],[130,2,107,0],[131,2,108,0],[132,2,109,0],[133,0,110,0],[134,0,111,0],[135,0,112,0],[136,2,113,7],[136,17,113,22,"unloadAllAsync"],[136,31,113,36,"unloadAllAsync"],[136,32,113,36],[136,34,113,39],[137,4,114,4],[137,8,114,8],[137,9,114,9,"ExpoFontLoader"],[137,23,114,23],[137,24,114,23,"default"],[137,31,114,23],[137,32,114,24,"unloadAllAsync"],[137,46,114,38],[137,48,114,40],[138,6,115,8],[138,12,115,14],[138,16,115,18,"UnavailabilityError"],[138,32,115,37],[138,33,115,37,"UnavailabilityError"],[138,52,115,37],[138,53,115,38],[138,64,115,49],[138,66,115,51],[138,82,115,67],[138,83,115,68],[139,4,116,4],[140,4,117,4],[140,8,117,8,"Object"],[140,14,117,14],[140,15,117,15,"keys"],[140,19,117,19],[140,20,117,20,"loadPromises"],[140,27,117,32],[140,28,117,32,"loadPromises"],[140,40,117,32],[140,41,117,33],[140,42,117,34,"length"],[140,48,117,40],[140,50,117,42],[141,6,118,8],[141,12,118,14],[141,16,118,18,"CodedError"],[141,32,118,28],[141,33,118,28,"CodedError"],[141,43,118,28],[141,44,118,29],[141,56,118,41],[141,58,118,43],[141,110,118,95,"Object"],[141,116,118,101],[141,117,118,102,"keys"],[141,121,118,106],[141,122,118,107,"loadPromises"],[141,129,118,119],[141,130,118,119,"loadPromises"],[141,142,118,119],[141,143,118,120],[141,144,118,121,"join"],[141,148,118,125],[141,149,118,126],[141,153,118,130],[141,154,118,131],[141,156,118,133],[141,157,118,134],[142,4,119,4],[143,4,120,4],[143,8,120,4,"purgeCache"],[143,15,120,14],[143,16,120,14,"purgeCache"],[143,26,120,14],[143,28,120,15],[143,29,120,16],[144,4,121,4],[144,10,121,10,"ExpoFontLoader"],[144,24,121,24],[144,25,121,24,"default"],[144,32,121,24],[144,33,121,25,"unloadAllAsync"],[144,47,121,39],[144,48,121,40],[144,49,121,41],[145,2,122,0],[146,2,123,0],[147,2,124,0],[148,0,125,0],[149,0,126,0],[150,0,127,0],[151,0,128,0],[152,0,129,0],[153,0,130,0],[154,0,131,0],[155,0,132,0],[156,2,133,7],[156,17,133,22,"unloadAsync"],[156,28,133,33,"unloadAsync"],[156,29,133,34,"fontFamilyOrFontMap"],[156,48,133,53],[156,50,133,55,"options"],[156,57,133,62],[156,59,133,64],[157,4,134,4],[157,8,134,8],[157,9,134,9,"ExpoFontLoader"],[157,23,134,23],[157,24,134,23,"default"],[157,31,134,23],[157,32,134,24,"unloadAsync"],[157,43,134,35],[157,45,134,37],[158,6,135,8],[158,12,135,14],[158,16,135,18,"UnavailabilityError"],[158,32,135,37],[158,33,135,37,"UnavailabilityError"],[158,52,135,37],[158,53,135,38],[158,64,135,49],[158,66,135,51],[158,79,135,64],[158,80,135,65],[159,4,136,4],[160,4,137,4],[160,8,137,8],[160,15,137,15,"fontFamilyOrFontMap"],[160,34,137,34],[160,39,137,39],[160,47,137,47],[160,49,137,49],[161,6,138,8],[161,10,138,12,"options"],[161,17,138,19],[161,19,138,21],[162,8,139,12],[162,14,139,18],[162,18,139,22,"CodedError"],[162,34,139,32],[162,35,139,32,"CodedError"],[162,45,139,32],[162,46,139,33],[162,60,139,47],[162,62,139,49],[162,117,139,104,"options"],[162,124,139,111],[162,232,139,219],[162,233,139,220],[163,6,140,8],[164,6,141,8],[164,12,141,14,"fontMap"],[164,19,141,21],[164,22,141,24,"fontFamilyOrFontMap"],[164,41,141,43],[165,6,142,8],[165,12,142,14,"names"],[165,17,142,19],[165,20,142,22,"Object"],[165,26,142,28],[165,27,142,29,"keys"],[165,31,142,33],[165,32,142,34,"fontMap"],[165,39,142,41],[165,40,142,42],[166,6,143,8],[166,12,143,14,"Promise"],[166,19,143,21],[166,20,143,22,"all"],[166,23,143,25],[166,24,143,26,"names"],[166,29,143,31],[166,30,143,32,"map"],[166,33,143,35],[166,34,143,37,"name"],[166,38,143,41],[166,42,143,46,"unloadFontInNamespaceAsync"],[166,68,143,72],[166,69,143,73,"name"],[166,73,143,77],[166,75,143,79,"fontMap"],[166,82,143,86],[166,83,143,87,"name"],[166,87,143,91],[166,88,143,92],[166,89,143,93],[166,90,143,94],[166,91,143,95],[167,6,144,8],[168,4,145,4],[169,4,146,4],[169,11,146,11],[169,17,146,17,"unloadFontInNamespaceAsync"],[169,43,146,43],[169,44,146,44,"fontFamilyOrFontMap"],[169,63,146,63],[169,65,146,65,"options"],[169,72,146,72],[169,73,146,73],[170,2,147,0],[171,2,148,0],[171,17,148,15,"unloadFontInNamespaceAsync"],[171,43,148,41,"unloadFontInNamespaceAsync"],[171,44,148,42,"fontFamily"],[171,54,148,52],[171,56,148,54,"options"],[171,63,148,61],[171,65,148,63],[172,4,149,4],[172,8,149,8],[172,9,149,9,"isLoaded"],[172,17,149,17],[172,18,149,18,"fontFamily"],[172,28,149,28],[172,29,149,29],[172,31,149,31],[173,6,150,8],[174,4,151,4],[174,5,151,5],[174,11,152,9],[175,6,153,8],[175,10,153,8,"purgeFontFamilyFromCache"],[175,17,153,32],[175,18,153,32,"purgeFontFamilyFromCache"],[175,42,153,32],[175,44,153,33,"fontFamily"],[175,54,153,43],[175,55,153,44],[176,4,154,4],[177,4,155,4],[178,4,156,4],[179,4,157,4],[180,4,158,4],[181,4,159,4],[181,8,159,8],[181,9,159,9,"fontFamily"],[181,19,159,19],[181,21,159,21],[182,6,160,8],[182,12,160,14],[182,16,160,18,"CodedError"],[182,32,160,28],[182,33,160,28,"CodedError"],[182,43,160,28],[182,44,160,29],[182,61,160,46],[182,63,160,48],[182,92,160,77],[182,93,160,78],[183,4,161,4],[184,4,162,4],[184,8,162,8],[184,9,162,9,"ExpoFontLoader"],[184,23,162,23],[184,24,162,23,"default"],[184,31,162,23],[184,32,162,24,"unloadAsync"],[184,43,162,35],[184,45,162,37],[185,6,163,8],[185,12,163,14],[185,16,163,18,"UnavailabilityError"],[185,32,163,37],[185,33,163,37,"UnavailabilityError"],[185,52,163,37],[185,53,163,38],[185,64,163,49],[185,66,163,51],[185,79,163,64],[185,80,163,65],[186,4,164,4],[187,4,165,4],[187,10,165,10,"ExpoFontLoader"],[187,24,165,24],[187,25,165,24,"default"],[187,32,165,24],[187,33,165,25,"unloadAsync"],[187,44,165,36],[187,45,165,37,"fontFamily"],[187,55,165,47],[187,57,165,49,"options"],[187,64,165,56],[187,65,165,57],[188,2,166,0],[189,0,166,1],[189,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDQ;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXkB"},"hasCjsExports":false},"type":"js/module"}]}